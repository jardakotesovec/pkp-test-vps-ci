name: Update PKP Dataset on VPS

on:
  workflow_call:
    inputs:
      project:
        description: "The PKP project name (e.g., ojs, omp, ops)"
        required: true
        type: string
      branch:
        description: "The branch name to update dataset for"
        required: true
        type: string
      copies:
        description: "Comma-separated list of copies to update (e.g., 'default,qa,hosting'); 'default' for the one without suffix"
        required: true
        type: string
    secrets:
      SSH_PRIVATE_KEY:
        required: true
      SSH_HOST:
        required: true
      SSH_USERNAME:
        required: true

jobs:
  update-dataset:
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }} # Map secret to env for conditional check
    steps:
      - name: Update Dataset via SSH
        if: ${{ env.SSH_HOST != '' }} # Skip if secret is empty/missing
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            project="${{ inputs.project }}"
            branch="${{ inputs.branch }}"
            copies="${{ inputs.copies }}"

            # Sanitize branch for DB name (replace dashes with underscores, matching deployment logic)
            db_safe_branch="${branch//-/_}"

            # Set suffixes from required copies input
            IFS=',' read -r -a suffixes <<< "$copies"

            # Extract MySQL root password (once)
            PASSWORD=$(grep 'mysql_root_pass=' /root/.hcloud_password | sed 's/.*="//;s/"$//')

            # Create a unique temporary MySQL config file to avoid race conditions
            cnf_file=$(mktemp /tmp/my.cnf.XXXXXX)
            echo "[client]" > "$cnf_file"
            echo "user=root" >> "$cnf_file"
            echo "password=$PASSWORD" >> "$cnf_file"
            chmod 600 "$cnf_file"

            # Create a unique temporary directory for the dataset clone
            tmp_dir=$(mktemp -d /tmp/datasets_${project}_${branch//[^a-zA-Z0-9]/_}.XXXXXX)

            # Set up trap to clean up temporary files and directory on exit
            trap 'rm -f "$cnf_file"; rm -rf "$tmp_dir"' EXIT

            # Clone the dataset repository sparsely
            git clone \
              --depth 1 \
              --filter=blob:none \
              --sparse \
              https://github.com/pkp/datasets.git "$tmp_dir"

            cd "$tmp_dir"
            git sparse-checkout set $project/$branch/mysql

            dataset_path="$tmp_dir/$project/$branch/mysql"

            # Loop over each suffix to update the corresponding copy
            for suffix in "${suffixes[@]}"; do
              if [ "$suffix" == "default" ]; then
                variant="$project"
                db_variant="$db_safe_branch"
              else
                variant="${project}-${suffix}"
                db_variant="${suffix}_${db_safe_branch}"
              fi

              db_name="${project}_${db_variant}"
              base="/var/www/${{ secrets.SSH_HOST }}.sslip.io/$variant"
              app_dir="$base/$branch"

              # Drop and recreate the database using the config file
              mysql --defaults-file="$cnf_file" -h localhost -P 3306 -e "DROP DATABASE IF EXISTS $db_name; CREATE DATABASE $db_name CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;"

              # Load the dataset into the database using the config file
              mysql --defaults-file="$cnf_file" -h localhost -P 3306 "$db_name" < "$dataset_path/database.sql"

              # Copy files and public directories from the dataset (replace existing)
              rm -rf "$app_dir/files" "$app_dir/public"
              cp -r "$dataset_path/files" "$app_dir/files"
              cp -r "$dataset_path/public" "$app_dir/public"

              # Set permissions for the copied directories and status file
              chown -R www-data:www-data "$app_dir/files" "$app_dir/public" "$app_dir/status.php"
              chmod -R 775 "$app_dir/files" "$app_dir/public" "$app_dir/status.php"
            done
