name: Cleanup PR Deployment on VPS

on:
  workflow_call:
    inputs:
      project:
        description: "The PKP project name (e.g., ojs, omp, ops)"
        required: true
        type: string
      pr_number:
        description: "PR Number to cleanup"
        required: true
        type: string
    secrets:
      SSH_PRIVATE_KEY:
        required: true
      SSH_HOST:
        required: true
      SSH_USERNAME:
        required: true

jobs:
  cleanup:
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }} # Map secret to env for conditional check
    steps:
      - name: Cleanup via SSH
        if: ${{ env.SSH_HOST != '' }} # Skip if secret is empty/missing
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            project="${{ inputs.project }}"
            base="/var/www/${{ secrets.SSH_HOST }}.sslip.io/$project"
            dir="$base/pr-${{ inputs.pr_number }}"
            db_name="${project}_pr_${{ inputs.pr_number }}"

            # Extract MySQL root password (once)
            PASSWORD=$(grep 'mysql_root_pass=' /root/.hcloud_password | sed 's/.*="//;s/"$//')

            # Create a unique temporary MySQL config file to avoid passing password on CLI
            cnf_file=$(mktemp /tmp/my.cnf.XXXXXX)
            echo "[client]" > "$cnf_file"
            echo "user=root" >> "$cnf_file"
            echo "password=$PASSWORD" >> "$cnf_file"
            chmod 600 "$cnf_file"

            # Set up trap to clean up temporary file on exit
            trap 'rm -f "$cnf_file"' EXIT

            # Check if DB exists
            if mysql --defaults-file="$cnf_file" -h localhost -P 3306 -e "SHOW DATABASES LIKE '$db_name'" | grep -q "$db_name"; then
              # Drop DB if exists
              mysql --defaults-file="$cnf_file" -h localhost -P 3306 -e "DROP DATABASE $db_name;"
              echo "Dropped database $db_name"
            else
              echo "No database found for $db_name; nothing to drop"
            fi

            # Remove directory if exists
            if [ -d "$dir" ]; then
              rm -rf "$dir"
              echo "Cleaned up $dir"
            else
              echo "No deployment found for pr-${{ inputs.pr_number }}; nothing to cleanup"
            fi
