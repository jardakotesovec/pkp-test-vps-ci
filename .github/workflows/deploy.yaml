name: Deploy PKP Project to VPS

on:
  workflow_call:
    inputs:
      project:
        description: "The PKP project name (e.g., ojs, omp, ops)"
        required: true
        type: string
      branch:
        description: "The branch name to deploy"
        required: false
        type: string
      pr_number:
        description: "PR Number for fork deployments (optional)"
        required: false
        type: string
      tag:
        description: "Tag name to deploy from main PKP repo (e.g., 'ojs-3_5_0-1') (optional, overrides branch/pr_number)"
        required: false
        type: string
      copies:
        description: "Comma-separated suffixes for additional branch copies (e.g., 'qa,hosting')"
        required: false
        type: string
    secrets:
      SSH_PRIVATE_KEY:
        required: true
      SSH_HOST:
        required: true
      SSH_USERNAME:
        required: true
      SMTP_SERVER:
        required: false
      SMTP_PORT:
        required: false
      SMTP_USERNAME:
        required: false
      SMTP_PASSWORD:
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }} # Map secret to env for conditional check
    steps:
      - name: Fetch PR details
        if: ${{ inputs.pr_number }}
        id: fetch-pr
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: Number('${{ inputs.pr_number }}')
            });
            return JSON.stringify({
              head_owner: pr.data.head.repo.owner.login,
              head_branch: pr.data.head.ref,
              base_branch: pr.data.base.ref
            });
      - name: Deploy via SSH
        if: ${{ env.SSH_HOST != '' }} # Skip if secret is empty/missing
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Load nvm to ensure it's available in this non-interactive SSH session
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

            project="${{ inputs.project }}"
            tag="${{ inputs.tag }}"
            pr_number="${{ inputs.pr_number }}"
            input_branch="${{ inputs.branch }}"  # Save original branch input

            if [ -n "$tag" ]; then
              clone_owner="pkp"
              clone_branch="$tag"
              base_branch="$tag"  # Use tag for DB naming
              branch="$tag"  # Use tag as directory name
              do_import=1  # Import dataset like PR

              # Determine dataset_branch for tags
              version="$tag"
              if [[ "$tag" == "${project}-"* ]]; then
                version="${tag#${project}-}"
              fi
              dataset_branch="stable-${version%%-*}"
            elif [ -n "$pr_number" ]; then
              branch="pr-$pr_number"
              base_branch="${{ inputs.pr_number && fromJSON(steps.fetch-pr.outputs.result).base_branch || inputs.branch }}"
              dataset_branch="$base_branch"  # Use base_branch for dataset
              clone_owner="${{ inputs.pr_number && fromJSON(steps.fetch-pr.outputs.result).head_owner || github.repository_owner }}"
              clone_branch="${{ inputs.pr_number && fromJSON(steps.fetch-pr.outputs.result).head_branch || inputs.branch }}"
              do_import=1  # Import dataset
            else
              branch="$input_branch"
              base_branch="$input_branch"  # Assume stable branch
              dataset_branch="$base_branch"  # Use branch for dataset
              clone_owner="${{ github.repository_owner }}"
              clone_branch="$input_branch"
              do_import=0  # No import for regular branches
            fi

            # Sanitize branch for DB name (replace dashes with underscores)
            db_safe_base="${branch//-/_}"

            copies="${{ inputs.copies }}"

            # Set suffixes (default empty for main copy; add others if copies provided and not PR/tag)
            suffixes=("")
            if [ $do_import -eq 0 ] && [ -n "$copies" ]; then
              IFS=',' read -r -a additional <<< "$copies"
              suffixes+=("${additional[@]}")
            fi

            # Extract MySQL root password (once)
            PASSWORD=$(grep 'mysql_root_pass=' /root/.hcloud_password | sed 's/.*="//;s/"$//')

            # Build once for efficiency (composer and npm)
            build_dir="/tmp/build_${project}_${branch//[^a-zA-Z0-9]/_}"
            rm -rf "$build_dir"

            git clone \
              --depth 5 \
              --single-branch \
              --branch "$clone_branch" \
              --filter=blob:none \
              https://github.com/$clone_owner/$project.git "$build_dir"
            cd "$build_dir"

            git submodule update --init --recursive --depth 5

            # Ignore file mode changes (prevents git status from showing permission modifications)
            git config core.fileMode false

            # Install dependencies (no config needed yet)
            COMPOSER_ALLOW_SUPERUSER=1 composer --working-dir=lib/pkp install
            COMPOSER_ALLOW_SUPERUSER=1 composer --working-dir=plugins/generic/citationStyleLanguage install
            if [ "$project" = "ojs" ] || [ "$project" = "omp" ]; then
              COMPOSER_ALLOW_SUPERUSER=1 composer --working-dir=plugins/paymethod/paypal install
            fi

            if [[ "$base_branch" == *"3_3_0"* ]]; then
              nvm exec 16 npm install
              nvm exec 16 npm run build
            else
              npm install
              npm run build
            fi

            # Clean up unnecessary directories to reduce copy size/time
            rm -rf node_modules

            # Loop over suffixes to deploy each copy
            for suffix in "${suffixes[@]}"; do
              if [ -z "$suffix" ]; then
                variant="$project"
                db_variant="$db_safe_base"
              else
                variant="${project}-${suffix}"
                db_variant="${suffix}_${db_safe_base}"
              fi

              db_name="${project}_${db_variant}"
              base="/var/www/${{ secrets.SSH_HOST }}.sslip.io/$variant"
              dir="$base/$branch"
              tmp_dir="$base/${branch}_tmp"

              # Ensure base directory exists
              mkdir -p "$base"

              # Clean up previous temp dir
              rm -rf "$tmp_dir"

              cp -r "$build_dir" "$tmp_dir"
              cd "$tmp_dir"

              # Copy and update config (per copy)
              cp config.TEMPLATE.inc.php config.inc.php

              sed -i '/^\[database\]$/,/^\[/ s/^username = .*/username = root/' config.inc.php
              sed -i '/^\[database\]$/,/^\[/ s/^password = .*/password = "'"$PASSWORD"'"/' config.inc.php
              sed -i '/^\[database\]$/,/^\[/ s/^name = .*/name = '"$db_name"'/' config.inc.php

              sed -i '/^\[general\]$/,/^\[/ s/^installed = .*/installed = On/' config.inc.php
              sed -i '/^\[general\]$/,/^\[/ s/^allowed_hosts = .*/allowed_hosts = '\''["${{ secrets.SSH_HOST }}.sslip.io"]'\''/' config.inc.php
              
              # Configure email settings to use SMTP
              sed -i '/^\[email\]$/,/^\[/ s/^default = .*/default = smtp/' config.inc.php
              sed -i '/^\[email\]$/,/^\[/ s/^;*\s*smtp = .*/smtp = On/' config.inc.php
              sed -i '/^\[email\]$/,/^\[/ s/^;*\s*smtp_server = .*/smtp_server = ${{ secrets.SMTP_SERVER || '127.0.0.1' }}/' config.inc.php
              sed -i '/^\[email\]$/,/^\[/ s/^;*\s*smtp_port = .*/smtp_port = ${{ secrets.SMTP_PORT || '1025' }}/' config.inc.php
              sed -i '/^\[email\]$/,/^\[/ s/^;*\s*smtp_auth = .*/smtp_auth = ssl/' config.inc.php
              sed -i '/^\[email\]$/,/^\[/ s/^;*\s*smtp_username = .*/smtp_username = ${{ secrets.SMTP_USERNAME || '' }}/' config.inc.php
              sed -i '/^\[email\]$/,/^\[/ s/^;*\s*smtp_password = .*/smtp_password = ${{ secrets.SMTP_PASSWORD || '' }}/' config.inc.php

              # Prepare persistent directories
              mkdir -p files public

              # Copy status.php
              cp /root/status.php .
              chown -R www-data:www-data status.php

              if [ $do_import -eq 1 ]; then
                dataset_tmp="/tmp/datasets_${variant}_${branch//[^a-zA-Z0-9]/_}"
                rm -rf "$dataset_tmp"

                echo "Cloning datasets repo for branch: $dataset_branch"

                git clone \
                  --depth 1 \
                  --filter=blob:none \
                  --sparse \
                  https://github.com/pkp/datasets.git "$dataset_tmp"

                cd "$dataset_tmp"
                git sparse-checkout set $project/$dataset_branch/mysql

                echo "Contents after sparse-checkout:"
                ls -R $project/$dataset_branch/mysql

                cd "$tmp_dir"

                # Drop DB if exists, create fresh
                echo "Creating database $db_name"
                mysql -u root -p"$PASSWORD" -h localhost -P 3306 -e "DROP DATABASE IF EXISTS $db_name; CREATE DATABASE $db_name CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;"
                echo "Database created."

                # Load SQL
                sql_file="$dataset_tmp/$project/$dataset_branch/mysql/database.sql"
                echo "Loading SQL from $sql_file"
                mysql -u root -p"$PASSWORD" -h localhost -P 3306 "$db_name" < "$sql_file"

                # Reset and copy fresh files/public from dataset
                rm -rf files public

                files_dir="$dataset_tmp/$project/$dataset_branch/mysql/files"
                public_dir="$dataset_tmp/$project/$dataset_branch/mysql/public"

                echo "Copying files from $files_dir to $tmp_dir/files"
                cp -r "$files_dir" files
                echo "Copying public from $public_dir to $tmp_dir/public"
                cp -r "$public_dir" public

                echo "Setting permissions on files and public"
                chown -R www-data:www-data files public
                # chmod -R 775 files public

                echo "Contents of files folder after copy:"
                ls -l files

                rm -rf "$dataset_tmp"
              else
                # For branches, preserve files/public if dir exists
                if [ -d "$dir" ]; then
                  rm -rf files
                  mv "$dir/files" files
                  rm -rf public
                  mv "$dir/public" public
                fi
              fi

              # Generate app key (instance-specific, after config and DB setup)
              if [ "$base_branch" = "stable-3_5_0" ] || [ "$base_branch" = "main" ]; then
                echo "Generating app key"
                php lib/pkp/tools/appKey.php generate
              fi

              # Now minimize downtime: delete old dir (if any) and move temp to live
              rm -rf "$dir"
              mv "$tmp_dir" "$dir"

              # Set permissions on entire dir
              chown -R www-data:www-data "$dir"
              # find "$dir" -type d -exec chmod 755 {} \;
              # find "$dir" -type f -exec chmod 644 {} \;
            done

            # Clean up build dir
            rm -rf "$build_dir"
