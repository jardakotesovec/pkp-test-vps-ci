name: Deploy PKP Project to VPS

on:
  workflow_call:
    inputs:
      project:
        description: "The PKP project name (e.g., ojs, omp, ops)"
        required: true
        type: string
      branch:
        description: "The branch name to deploy"
        required: true
        type: string
      pr_number:
        description: "PR Number for fork deployments (optional)"
        required: false
        type: string
      copies:
        description: "Comma-separated suffixes for additional branch copies (e.g., 'qa,hosting')"
        required: false
        type: string
    secrets:
      SSH_PRIVATE_KEY:
        required: true
      SSH_HOST:
        required: true
      SSH_USERNAME:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }} # Map secret to env for conditional check
    steps:
      - name: Detect base branch
        if: ${{ !inputs.pr_number }}
        id: detect-base
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const possibleBases = ['stable-3_3_0', 'stable-3_4_0', 'stable-3_5_0', 'main'];
            if (possibleBases.includes('${{ inputs.branch }}')) {
              return '${{ inputs.branch }}';
            }
            let minAhead = Infinity;
            let selectedBase = null;
            for (const base of possibleBases) {
              try {
                const response = await github.rest.repos.compareCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  base,
                  head: '${{ inputs.branch }}'
                });
                const { status, ahead_by, behind_by } = response.data;
                if (status === 'ahead' && behind_by === 0 && ahead_by < minAhead) {
                  minAhead = ahead_by;
                  selectedBase = base;
                }
              } catch (e) {
                // Skip if error (e.g., base does not exist)
              }
            }
            if (selectedBase) {
              return selectedBase;
            } else {
              throw new Error('Could not detect base branch for ${{ inputs.branch }}');
            }
      - name: Fetch PR details
        if: ${{ inputs.pr_number }}
        id: fetch-pr
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: Number('${{ inputs.pr_number }}')
            });
            return JSON.stringify({
              head_owner: pr.data.head.repo.owner.login,
              head_branch: pr.data.head.ref,
              base_branch: pr.data.base.ref
            });
      - name: Deploy via SSH
        if: ${{ env.SSH_HOST != '' }} # Skip if secret is empty/missing
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            project="${{ inputs.project }}"
            branch="${{ inputs.pr_number && format('pr-{0}', inputs.pr_number) || inputs.branch }}"
            base_branch="${{ inputs.pr_number && fromJSON(steps.fetch-pr.outputs.result).base_branch || steps.detect-base.outputs.result }}"
            clone_owner="${{ inputs.pr_number && fromJSON(steps.fetch-pr.outputs.result).head_owner || github.repository_owner }}"
            clone_branch="${{ inputs.pr_number && fromJSON(steps.fetch-pr.outputs.result).head_branch || inputs.branch }}"
            copies="${{ inputs.copies }}"

            # Determine if PR deployment
            is_pr=0
            if [ -n "${{ inputs.pr_number }}" ]; then
              is_pr=1
            fi

            # Set suffixes
            suffixes=()
            if [ $is_pr -eq 1 ]; then
              suffixes=("")
            else
              if [ -n "$copies" ]; then
                IFS=',' read -r -a suffixes <<< "$copies"
              else
                suffixes=("")
              fi
            fi

            # Extract MySQL root password (once)
            PASSWORD=$(grep 'mysql_root_pass=' /root/.hcloud_password | sed 's/.*="//;s/"$//')

            # Build once for efficiency (composer and npm)
            build_dir="/tmp/build_${project}_${branch//[^a-zA-Z0-9]/_}"
            rm -rf "$build_dir"

            git clone \
              --depth 1 \
              --single-branch \
              --branch "$clone_branch" \
              --recurse-submodules \
              --shallow-submodules \
              --filter=blob:none \
              https://github.com/$clone_owner/$project.git "$build_dir"

            cd "$build_dir"

            # Install dependencies (no config needed yet)
            composer --working-dir=lib/pkp install
            composer --working-dir=plugins/generic/citationStyleLanguage install
            composer --working-dir=plugins/paymethod/paypal install

            npm install
            npm run build

            # Loop over suffixes to deploy each copy
            for suffix in "${suffixes[@]}"; do
              if [ -z "$suffix" ]; then
                variant="$project"
                db_variant="$base_branch"
              else
                variant="${project}-${suffix}"
                db_variant="${suffix}_${base_branch}"
              fi

              db_name="${project}_${db_variant}"
              base="/var/www/${{ secrets.SSH_HOST }}.sslip.io/$variant"
              dir="$base/$branch"
              tmp_dir="$base/${branch}_tmp"

              # Ensure base directory exists
              mkdir -p "$base"

              # Clean up previous temp dir
              rm -rf "$tmp_dir"

              # Copy built dir to temp
              cp -r "$build_dir" "$tmp_dir"
              cd "$tmp_dir"

              # Copy and update config (per copy)
              cp config.TEMPLATE.inc.php config.inc.php

              sed -i '/^\[database\]$/,/^\[/ s/^username = .*/username = root/' config.inc.php
              sed -i '/^\[database\]$/,/^\[/ s/^password = .*/password = "'"$PASSWORD"'"/' config.inc.php
              sed -i '/^\[database\]$/,/^\[/ s/^name = .*/name = '"$db_name"'/' config.inc.php

              sed -i '/^\[general\]$/,/^\[/ s/^installed = .*/installed = On/' config.inc.php

              # Generate app key (instance-specific, after config setup)
              php lib/pkp/tools/appKey.php generate

              # Prepare persistent directories
              mkdir -p files public

              if [ $is_pr -eq 1 ]; then
                dataset_tmp="/tmp/datasets_${variant}_${branch//[^a-zA-Z0-9]/_}"
                rm -rf "$dataset_tmp"

                git clone \
                  --depth 1 \
                  --filter=blob:none \
                  --sparse \
                  https://github.com/pkp/datasets.git "$dataset_tmp"

                cd "$dataset_tmp"
                git sparse-checkout set $project/$base_branch/mysql

                # Drop DB if exists, create fresh
                mysql -u root -p"$PASSWORD" -h localhost -P 3306 -e "DROP DATABASE IF EXISTS $db_name; CREATE DATABASE $db_name CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;"

                # Load SQL
                mysql -u root -p"$PASSWORD" -h localhost -P 3306 "$db_name" < "$dataset_tmp/$project/$base_branch/mysql/database.sql"

                # Reset and copy fresh files/public from dataset
                rm -rf files public
                cp -r "$dataset_tmp/$project/$base_branch/mysql/files" files
                cp -r "$dataset_tmp/$project/$base_branch/mysql/public" public

                chown -R deploy:www-data files public
                chmod -R 775 files public

                rm -rf "$dataset_tmp"

                cd "$tmp_dir"
              else
                # For branches, preserve files/public if dir exists
                if [ -d "$dir" ]; then
                  rm -rf files
                  mv "$dir/files" files
                  rm -rf public
                  mv "$dir/public" public
                fi
              fi

              # Now minimize downtime: delete old dir (if any) and move temp to live
              rm -rf "$dir"
              mv "$tmp_dir" "$dir"

              # Set permissions on entire dir
              chown -R deploy:www-data "$dir"
              chmod -R 775 "$dir"
            done

            # Clean up build dir
            rm -rf "$build_dir"
